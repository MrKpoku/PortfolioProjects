SELECT
*
FROM PortfolioProject..CovidDeaths
WHERE continent IS NOT NULL 
ORDER BY location ASC , date ASC


--SELECT
--*
--FROM PortfolioProject..CovidVaccinations
--ORDER BY location ASC , date ASC

-- SELECT DATA THAT WE ARE GOING TO BE USING

SELECT
LOCATION,
DATE,
CONTINENT,
total_cases,
new_cases,
total_deaths,
POPULATION
FROM CovidDeaths
ORDER BY location ASC,date ASC

--LOOKING AT THE TOTAL CASES VS TOTAL DEATHS
-- SHOWS THE LIKELIHOOD OF DYING IF YOU ARE INFECTED WITH COVID IN YOUR LOCATION

SELECT
LOCATION,
DATE,
CONTINENT,
total_cases,
total_deaths,
(1.0 *total_deaths  / total_cases) * 100 AS DEATHPERCENTAGE
FROM CovidDeaths
WHERE total_deaths IS NOT NULL AND LOCATION = 'BELGIUM'
ORDER BY location ASC,date ASC


--CREATING VIEW FOR DEATH PERCENTAGE

CREATE VIEW DEATHPERCENTAGE AS
SELECT
LOCATION,
DATE,
CONTINENT,
total_cases,
total_deaths,
(1.0 *total_deaths  / total_cases) * 100 AS DEATHPERCENTAGE
FROM CovidDeaths
WHERE total_deaths IS NOT NULL AND LOCATION = 'BELGIUM'
--ORDER BY location ASC,date ASC


--TOTAL CASES VS POPULATION 
--EXPLAINS WHAT % OF POPULATION GOT COVID

SELECT
LOCATION AS COUNTRY,
DATE,
population,
CONTINENT,
TOTAL_CASES,
(1.0 * total_cases  /population) * 100 AS PERCENTAGEOFPOPULATIONINFECTED
FROM CovidDeaths
WHERE total_CASES IS NOT NULL
ORDER BY location ASC,date ASC


--CREATING VIEW FOR WHAT % OF POPULATION GOT COVID

CREATE VIEW PERCENTAGEOFPOPULATIONINFECTED AS 
SELECT
LOCATION AS COUNTRY,
DATE,
population,
CONTINENT,
TOTAL_CASES,
(1.0 * total_cases  /population) * 100 AS PERCENTAGEOFPOPULATIONINFECTED
FROM CovidDeaths
WHERE total_CASES IS NOT NULL
--ORDER BY location ASC,date ASC


-- COUNTRIES WITH THE HIGHEST INFECTION RATE VS POPULATION

SELECT
LOCATION AS COUNTRY,
population,
CONTINENT,
MAX(TOTAL_CASES) AS HIGHESTINFECTIONCOUNT,
MAX((1.0 * total_cases  /population)) * 100 AS PERCENTPOPULATIONINFECTED
FROM CovidDeaths
WHERE total_CASES IS NOT NULL
GROUP BY LOCATION,population,continent
ORDER BY location ASC,PERCENTPOPULATIONINFECTED DESC,HIGHESTINFECTIONCOUNT DESC

--CREATING VIEW FOR COUNTRIES WITH THE HIGHEST DEATHCOUNT PER POPULATION

CREATE VIEW PERCENTPOPULATIONINFECTED AS
SELECT
LOCATION AS COUNTRY,
population,
CONTINENT,
MAX(TOTAL_CASES) AS HIGHESTINFECTIONCOUNT,
MAX((1.0 * total_cases  /population)) * 100 AS PERCENTPOPULATIONINFECTED
FROM CovidDeaths
WHERE total_CASES IS NOT NULL
GROUP BY LOCATION,population,continent
--ORDER BY location ASC,PERCENTPOPULATIONINFECTED DESC,HIGHESTINFECTIONCOUNT DESC

--SHOWS THE COUNTRIES WITH THE HIGHEST DEATHCOUNT PER POPULATION 

SELECT
LOCATION AS COUNTRY,
CONTINENT,
MAX(TOTAL_DEATHS ) AS TOTALDEATHCOUNT
FROM CovidDeaths
WHERE total_CASES IS NOT NULL AND continent IS NOT NULL 
GROUP BY LOCATION,continent
ORDER BY TOTALDEATHCOUNT DESC


--CREATING VIEW FOR CONNTRIES WITH THE HIGHEST DEATHCOUNT PER POPULATION

CREATE VIEW COUNTRIESHIGHESTDEATHCOUNT AS 
SELECT
LOCATION AS COUNTRY,
CONTINENT,
MAX(TOTAL_DEATHS ) AS TOTALDEATHCOUNT
FROM CovidDeaths
WHERE total_CASES IS NOT NULL AND continent IS NOT NULL 
GROUP BY LOCATION,continent
--ORDER BY TOTALDEATHCOUNT DESC




--SHOWING THE CONTINENTS WITH THE HIGHEST DEATHCOUNT PER POPULATION

SELECT
continent,
MAX(TOTAL_DEATHS ) AS TOTALDEATHCOUNT
FROM CovidDeaths
WHERE  continent IS NOT NULL
GROUP BY continent
ORDER BY TOTALDEATHCOUNT DESC


-- CREATING VIEW FOR CONTINENTS WITH THE HIGHEST DEATHCOUNT PER POPULATION

CREATE VIEW CONTINENTHIGHESTDEATHCOUNT AS 
SELECT
continent,
MAX(TOTAL_DEATHS ) AS TOTALDEATHCOUNT
FROM CovidDeaths
WHERE  continent IS NOT NULL
GROUP BY continent
--ORDER BY TOTALDEATHCOUNT DESC

-- GLOBAL NUMBERS

SELECT
DATE,
SUM(new_cases) AS TOTALCASES ,
SUM(NEW_DEATHS) AS TOTALDEATHS ,
--TOTAL_DEATHS,
(SUM(1.0 *NEW_DEATHS)/NULLIF(SUM(NEW_CASES),0))*100 AS NEWDEATHPERCENTAGE
FROM CovidDeaths
WHERE CONTINENT IS NOT NULL 
GROUP BY DATE
ORDER BY 1,2

--CREATING VIEW FOR GLOBAL NUMBERS 
CREATE VIEW GLOBALNUMBERS AS
SELECT
  DATE,
  SUM(new_cases) AS TotalCases,
  SUM(new_deaths) AS TotalDeaths,
  (SUM(1.0 * new_deaths) / NULLIF(SUM(new_cases), 0)) * 100 AS NewDeathPercentage
FROM CovidDeaths
WHERE continent IS NOT NULL
GROUP BY DATE;


-- GLOBAL NUMBERS v2

SELECT
SUM(new_cases) AS TOTALCASES ,
SUM(NEW_DEATHS) AS TOTALDEATHS ,
--TOTAL_DEATHS,
(SUM(1.0 *NEW_DEATHS)/NULLIF(SUM(NEW_CASES),0))*100 AS NEWDEATHPERCENTAGE
FROM CovidDeaths
WHERE CONTINENT IS NOT NULL 
ORDER BY 1,2



--TOTAL POPULATION VS VACCINATIONS 

SELECT
CD.continent,
CD.location,
CD.date,
CD.population,
CV.new_vaccinations
,SUM(CONVERT(BIGINT,CV.new_vaccinations)) OVER (PARTITION BY CD.location ORDER BY CD.location,CD.date ) AS ROLLINGPEOPLEVACCINATED 
--,(ROLLINGPEOPLEVACCINATED/CD.population)*100
FROM CovidDeaths AS CD
INNER JOIN CovidVaccinations AS CV
ON CD.location = CV.location
AND CD.date = CV.DATE
WHERE CD.continent IS NOT NULL 
ORDER BY 2,3



-- PERFORMING CTE 

WITH PoPvsVac (CONTINENT,LOCATION,DATE,POPULATION,NEW_VACCINATIONS,ROLLINGPEOPLEVACCINATED)
AS
(
SELECT
CD.continent,
CD.location,
CD.date,
CD.population,
CV.new_vaccinations
,SUM(CONVERT(BIGINT,CV.new_vaccinations)) OVER (PARTITION BY CD.location ORDER BY CD.location,CD.date ) AS ROLLINGPEOPLEVACCINATED 
--,(ROLLINGPEOPLEVACCINATED/CD.population)*100
FROM CovidDeaths AS CD
INNER JOIN CovidVaccinations AS CV
ON CD.location = CV.location
AND CD.date = CV.DATE
WHERE CD.continent IS NOT NULL 
--ORDER BY 2,3
)
SELECT
*,(1.0 * ROLLINGPEOPLEVACCINATED/POPULATION) * 100 AS PERCENTAGEOFPEOPLEVACCINATED
FROM PoPvsVac



--TEMP TABLE

DROP TABLE IF EXISTS #PERCENTPOPULATIONVACCINATED
CREATE TABLE #PERCENTPOPULATIONVACCINATED 
(
CONTINENT NVARCHAR(50),
LOCATION NVARCHAR(50),
DATE DATE,
POPULATION BIGINT,
NEW_VACCINATIONS NUMERIC,
ROLLINGPEOPLEVACCINATED NUMERIC
)

INSERT INTO #PERCENTPOPULATIONVACCINATED
SELECT
    CD.continent,
    CD.location,
    CD.date,
    CD.population,
    CV.new_vaccinations,
    SUM(CONVERT(INT, CV.new_vaccinations)) OVER (
      PARTITION BY CD.location
      ORDER BY CD.location, CD.date
    ) AS rollingPeopleVaccinated
  FROM CovidDeaths AS CD
  INNER JOIN CovidVaccinations AS CV
    ON CD.iso_code = CV.iso_code
    AND CD.location = CV.location
  WHERE CD.continent IS NOT NULL 
  --ORDER BY 2,3

  SELECT *, (ROLLINGPEOPLEVACCINATED / POPULATION ) * 100
  FROM #PERCENTPOPULATIONVACCINATED



  --CREATING VIEW TO STORE DATA FOR LATER VISUALIZATIONS

  CREATE VIEW PERCENTPOPULATIONVACCINATED AS 
  SELECT
    CD.continent,
    CD.location,
    CD.date,
    CD.population,
    CV.new_vaccinations,
    SUM(CONVERT(INT, CV.new_vaccinations)) OVER (
      PARTITION BY CD.location
      ORDER BY CD.location, CD.date
    ) AS rollingPeopleVaccinated
  FROM CovidDeaths AS CD
  INNER JOIN CovidVaccinations AS CV
    ON CD.iso_code = CV.iso_code
    AND CD.location = CV.location
  WHERE CD.continent IS NOT NULL 
  --ORDER BY 2,3

  SELECT
  *
  FROM PERCENTPOPULATIONVACCINATED


  












